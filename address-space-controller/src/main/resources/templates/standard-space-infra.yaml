apiVersion: v1
kind: Template
metadata:
  labels:
    app: enmasse
  name: standard-space-infra
objects:
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      addressSpace: ${ADDRESS_SPACE}
      enmasse.io/service-port.amqp: 5672
      enmasse.io/service-port.amqps: 5671
      enmasse.io/service-port.amqp-wss: 443
    labels:
      app: enmasse
      infraType: standard
      infraUuid: ${INFRA_UUID}
    name: messaging-${INFRA_UUID}
  spec:
    ports:
    - name: amqp
      port: 5672
      protocol: TCP
      targetPort: 5672
    - name: amqps
      port: 5671
      protocol: TCP
      targetPort: 5671
    - name: amqps-normal
      port: 55671
      protocol: TCP
      targetPort: amqps-normal
    - name: amqps-broker
      port: 56671
      protocol: TCP
      targetPort: amqps-broker
    - name: inter-router
      port: 55672
      protocol: TCP
      targetPort: 55672
    - name: https
      port: 443
      protocol: TCP
      targetPort: 8443
    selector:
      capability: router
      infraUuid: ${INFRA_UUID}
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: qdrouterd-config.${INFRA_UUID}
    labels:
      app: enmasse
      infraType: standard
      infraUuid: ${INFRA_UUID}
  data:
    qdrouterd.conf: |-
      router {
        mode: interior
        id: ${HOSTNAME}
        workerThreads: ${ROUTER_WORKER_THREADS}
        defaultDistribution: unavailable
        allowResumableLinkRoute: false
        timestampsInUTC: true
      }

      sslProfile {
        name: auth_service_ssl
        caCertFile: /etc/qpid-dispatch/authservice-ca/tls.crt
      }

      authServicePlugin {
        name: auth_service
        host: ${AUTHENTICATION_SERVICE_HOST}
        port: ${AUTHENTICATION_SERVICE_PORT}
        realm: ${AUTHENTICATION_SERVICE_SASL_INIT_HOST}
        sslProfile: auth_service_ssl
      }

      listener {
        host: 127.0.0.1
        port: 7777
        authenticatePeer: no
        http: true
        metrics: false
        healthz: true
        websockets: false
        httpRootDir: invalid
      }

      listener {
        host: 0.0.0.0
        port: 5672
        saslPlugin: auth_service
        authenticatePeer: yes
        idleTimeoutSeconds: ${ROUTER_IDLE_TIMEOUT}
        linkCapacity: ${ROUTER_LINK_CAPACITY}
        initialHandshakeTimeoutSeconds: ${ROUTER_HANDSHAKE_TIMEOUT}
      }

      listener {
        host: 0.0.0.0
        port: 55672
        role: inter-router
        authenticatePeer: yes
        sslProfile: inter_router_tls
        saslMechanisms: EXTERNAL
        idleTimeoutSeconds: ${ROUTER_IDLE_TIMEOUT}
        linkCapacity: ${ROUTER_LINK_CAPACITY}
      }

      listener {
        host: 0.0.0.0
        port: 8443
        saslPlugin: auth_service
        sslProfile: ssl_details
        http: true
        authenticatePeer: yes
        idleTimeoutSeconds: ${ROUTER_IDLE_TIMEOUT}
        linkCapacity: ${ROUTER_LINK_CAPACITY}
      }

      sslProfile {
        name: ssl_details
        certFile: /etc/qpid-dispatch/ssl/tls.crt
        privateKeyFile: /etc/qpid-dispatch/ssl/tls.key
      }

      listener {
        host: 0.0.0.0
        port: 5671
        saslPlugin: auth_service
        sslProfile: ssl_details
        requireSsl: true
        authenticatePeer: yes
        idleTimeoutSeconds: ${ROUTER_IDLE_TIMEOUT}
        linkCapacity: ${ROUTER_LINK_CAPACITY}
        initialHandshakeTimeoutSeconds: ${ROUTER_HANDSHAKE_TIMEOUT}
      }

      sslProfile {
        name: inter_router_tls
        certFile: /etc/enmasse-certs/tls.crt
        privateKeyFile: /etc/enmasse-certs/tls.key
        caCertFile: /etc/enmasse-certs/ca.crt
      }

      listener {
        host: 0.0.0.0
        port: 55671
        sslProfile: inter_router_tls
        saslMechanisms: EXTERNAL
        authenticatePeer: yes
        idleTimeoutSeconds: ${ROUTER_IDLE_TIMEOUT}
        linkCapacity: ${ROUTER_LINK_CAPACITY}
      }

      listener {
        host: 0.0.0.0
        port: 56671
        sslProfile: inter_router_tls
        saslMechanisms: EXTERNAL
        role: route-container
        authenticatePeer: yes
        idleTimeoutSeconds: ${ROUTER_IDLE_TIMEOUT}
        linkCapacity: ${ROUTER_LINK_CAPACITY}
      }

      connector {
        host: ragent-${INFRA_UUID}
        port: 5671
        sslProfile: inter_router_tls
        verifyHostname: no
      }

      linkRoute {
        name: override.lwt_in
        prefix: $lwt
        direction: in
        containerId: lwt-service
      }

      linkRoute {
        name: override.lwt_out
        prefix: $lwt
        direction: out
        containerId: lwt-service
      }

      address {
        name: override.mqtt
        prefix: $mqtt
        distribution: balanced
      }

      address {
        name: override.subctrl
        prefix: $subctrl
        distribution: balanced
      }

      address {
        name: override.temp
        prefix: $temp
        distribution: balanced
      }
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    annotations:
      addressSpace: ${ADDRESS_SPACE}
      enmasse.io/cert-cn: router.${INFRA_UUID}
      enmasse.io/cert-secret: router-internal-cert.${INFRA_UUID}
      prometheus.io/path: /metrics
      prometheus.io/port: '8080'
      prometheus.io/scrape: 'true'
    labels:
      app: enmasse
      name: qdrouterd
      infraType: standard
      infraUuid: ${INFRA_UUID}
    name: qdrouterd-${INFRA_UUID}
  spec:
    affinity:
      nodeAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            preference:
              matchExpressions:
                - key: node-role.enmasse.io/operator-infra
                  operator: In
                  values:
                    - "true"
    serviceName: qdrouterd-headless-${INFRA_UUID}
    replicas: 1
    selector:
      matchLabels:
        app: enmasse
        capability: router
        name: qdrouterd
        infraType: standard
        infraUuid: ${INFRA_UUID}
    template:
      metadata:
        annotations:
          addressSpace: ${ADDRESS_SPACE}
        labels:
          app: enmasse
          capability: router
          name: qdrouterd
          infraType: standard
          infraUuid: ${INFRA_UUID}
      spec:
        containers:
        - env:
          - name: QDROUTERD_CONF
            value: "/etc/qpid-dispatch/config/qdrouterd.conf"
          - name: QDROUTERD_AUTO_MESH_DISCOVERY
            value: "INFER"
          - name: QDROUTERD_AUTO_MESH_SERVICE_NAME
            value: "qdrouterd-headless-${INFRA_UUID}"
          image: ${env.ROUTER_IMAGE}
          imagePullPolicy: ${env.IMAGE_PULL_POLICY}
          livenessProbe:
            initialDelaySeconds: 30
            httpGet:
              path: /healthz
              port: local
              scheme: HTTP
          readinessProbe:
            initialDelaySeconds: 60
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
          name: router
          resources:
            limits:
              memory: ${ROUTER_MEMORY_LIMIT}
            requests:
              memory: ${ROUTER_MEMORY_LIMIT}
          ports:
          - containerPort: 5672
            name: amqp
            protocol: TCP
          - containerPort: 5671
            name: amqps
            protocol: TCP
          - containerPort: 7777
            name: local
            protocol: TCP
          - containerPort: 8080
            name: http
            protocol: TCP
          - containerPort: 8443
            name: https
            protocol: TCP
          - containerPort: 55671
            name: amqps-normal
            protocol: TCP
          - containerPort: 56671
            name: amqps-broker
            protocol: TCP
          volumeMounts:
          - mountPath: /etc/qpid-dispatch/ssl
            name: ssl-certs
            readOnly: true
          - mountPath: /etc/qpid-dispatch/authservice-ca
            name: authservice-ca
            readOnly: true
          - mountPath: /etc/enmasse-certs
            name: router-internal-cert
            readOnly: true
          - mountPath: /etc/qpid-dispatch/config
            name: qdrouterd-config
        volumes:
        - name: ssl-certs
          secret:
            secretName: ${MESSAGING_SECRET}
        - name: authservice-ca
          secret:
            secretName: authservice-ca.${INFRA_UUID}
        - name: router-internal-cert
          secret:
            secretName: router-internal-cert.${INFRA_UUID}
        - name: qdrouterd-config
          configMap:
            name: qdrouterd-config.${INFRA_UUID}
- apiVersion: v1
  data:
    tls.crt: ${AUTHENTICATION_SERVICE_CA_CERT}
  kind: Secret
  metadata:
    name: authservice-ca.${INFRA_UUID}
    labels:
      app: enmasse
      infraType: standard
      infraUuid: ${INFRA_UUID}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      addressSpace: ${ADDRESS_SPACE}
      enmasse.io/cert-secret: admin-internal-cert.${INFRA_UUID}
    labels:
      app: enmasse
      name: admin
      infraType: standard
      infraUuid: ${INFRA_UUID}
    name: admin.${INFRA_UUID}
  spec:
    affinity:
      nodeAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            preference:
              matchExpressions:
                - key: node-role.enmasse.io/operator-infra
                  operator: In
                  values:
                    - "true"
    replicas: 1
    strategy:
      type: Recreate
    selector:
      matchLabels:
        app: enmasse
        name: admin
        infraType: standard
        infraUuid: ${INFRA_UUID}
    template:
      metadata:
        annotations:
          addressSpace: ${ADDRESS_SPACE}
        labels:
          app: enmasse
          name: admin
          infraType: standard
          infraUuid: ${INFRA_UUID}
      spec:
        containers:
        - env:
          - name: MESSAGING_SERVICE_HOST
            value: messaging-${INFRA_UUID}
          - name: MESSAGING_SERVICE_PORT_AMQPS_NORMAL
            value: 55671
          - name: MESSAGING_SERVICE_PORT_AMQPS_BROKER
            value: 56671
          - name: CERT_DIR
            value: /etc/enmasse-certs
          - name: TEMPLATE_DIR
            value: /templates
          - name: STANDARD_INFRA_CONFIG_NAME
            value: ${STANDARD_INFRA_CONFIG_NAME}
          - name: ADDRESS_SPACE
            value: ${ADDRESS_SPACE}
          - name: ADDRESS_SPACE_NAMESPACE
            value: ${ADDRESS_SPACE_NAMESPACE}
          - name: INFRA_UUID
            value: ${INFRA_UUID}
          - name: ADDRESS_SPACE_PLAN
            value: ${ADDRESS_SPACE_PLAN}
          - name: RESYNC_INTERVAL
            value: ${CONTROLLER_RESYNC_INTERVAL}
          - name: CHECK_INTERVAL
            value: ${CONTROLLER_CHECK_INTERVAL}
          - name: EVENT_QUEUE_SIZE
            value: ${CONTROLLER_EVENT_QUEUE_SIZE}
          - name: ENABLE_EVENT_LOGGER
            value: ${ENABLE_EVENT_LOGGER}
          - name: AUTHENTICATION_SERVICE_HOST
            value: ${AUTHENTICATION_SERVICE_HOST}
          - name: AUTHENTICATION_SERVICE_PORT
            value: ${AUTHENTICATION_SERVICE_PORT}
          - name: AUTHENTICATION_SERVICE_CA_SECRET
            value: authservice-ca
          - name: AUTHENTICATION_SERVICE_CLIENT_SECRET
            value: ${AUTHENTICATION_SERVICE_CLIENT_SECRET}
          - name: JAVA_OPTS
            value: -verbose:gc
          - name: AUTHENTICATION_SERVICE_SASL_INIT_HOST
            value: ${AUTHENTICATION_SERVICE_SASL_INIT_HOST}
          - name: MESSAGING_SECRET
            value: ${MESSAGING_SECRET}
          image: ${env.STANDARD_CONTROLLER_IMAGE}
          imagePullPolicy: ${env.IMAGE_PULL_POLICY}
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            initialDelaySeconds: 30
          name: standard-controller
          ports:
          - containerPort: 8889
            name: http
          readinessProbe:
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            initialDelaySeconds: 30
          resources:
            limits:
              memory: ${ADMIN_MEMORY_LIMIT}
            requests:
              memory: ${ADMIN_MEMORY_LIMIT}
          volumeMounts:
          - mountPath: /etc/enmasse-certs
            name: admin-internal-cert
            readOnly: true
        - env:

          - name: MESSAGING_SERVICE_HOST
            value: messaging-${INFRA_UUID}
          - name: MESSAGING_SERVICE_PORT_AMQPS_NORMAL
            value: 55671
          - name: MESSAGING_SERVICE_PORT_AMQPS_BROKER
            value: 56671
          - name: INFRA_UUID
            value: ${INFRA_UUID}
          - name: ADDRESS_SPACE_PLAN
            value: ${ADDRESS_SPACE_PLAN}
          - name: CERT_DIR
            value: /etc/enmasse-certs
          - name: AUTHENTICATION_SERVICE_HOST
            value: ${AUTHENTICATION_SERVICE_HOST}
          - name: AUTHENTICATION_SERVICE_PORT
            value: ${AUTHENTICATION_SERVICE_PORT}
          - name: AUTHENTICATION_SERVICE_CA_SECRET
            value: authservice-ca
          - name: AUTHENTICATION_SERVICE_CLIENT_SECRET
            value: ${AUTHENTICATION_SERVICE_CLIENT_SECRET}
          - name: AUTHENTICATION_SERVICE_SASL_INIT_HOST
            value: ${AUTHENTICATION_SERVICE_SASL_INIT_HOST}
          - name: ADDRESS_SPACE
            value: ${ADDRESS_SPACE}
          - name: ADDRESS_SPACE_NAMESPACE
            value: ${ADDRESS_SPACE_NAMESPACE}
          - name: MESSAGING_CERT
            value: /opt/agent/messaging-cert/tls.crt
          - name: CONSOLE_OAUTH_DISCOVERY_URL
            value: ${CONSOLE_OAUTH_DISCOVERY_URL}
          - name: CONSOLE_OAUTH_CLIENT_ID
            value: ${CONSOLE_OAUTH_CLIENT_ID}
          - name: CONSOLE_OAUTH_CLIENT_SECRET
            value: ${CONSOLE_OAUTH_CLIENT_SECRET}
          - name: CONSOLE_OAUTH_SCOPE
            value: ${CONSOLE_OAUTH_SCOPE}
          image: ${env.AGENT_IMAGE}
          imagePullPolicy: ${env.IMAGE_PULL_POLICY}
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            periodSeconds: 30
            timeoutSeconds: 5
          name: agent
          ports:
          - containerPort: 8888
            name: http
          - containerPort: 8080
            name: https
          - containerPort: 56720
            name: amqp-ws
          readinessProbe:
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            periodSeconds: 30
            timeoutSeconds: 5
          resources:
            limits:
              memory: ${ADMIN_MEMORY_LIMIT}
            requests:
              memory: ${ADMIN_MEMORY_LIMIT}
          volumeMounts:
          - mountPath: /etc/console-certs
            name: console-secret
            readOnly: true
          - mountPath: /opt/agent/authservice-ca
            name: authservice-ca
            readOnly: true
          - mountPath: /etc/enmasse-certs
            name: admin-internal-cert
            readOnly: true
          - mountPath: /opt/agent/messaging-cert
            name: messaging-cert
            readOnly: true
        serviceAccountName: ${ADDRESS_SPACE_ADMIN_SA}
        volumes:
        - name: console-secret
          secret:
            secretName: ${CONSOLE_SECRET}
        - name: authservice-ca
          secret:
            secretName: authservice-ca.${INFRA_UUID}
        - name: admin-internal-cert
          secret:
            secretName: admin-internal-cert.${INFRA_UUID}
        - name: messaging-cert
          secret:
            secretName: ${MESSAGING_SECRET}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      addressSpace: ${ADDRESS_SPACE}
    labels:
      app: enmasse
      infraType: standard
      infraUuid: ${INFRA_UUID}
    name: qdrouterd-headless-${INFRA_UUID}
  spec:
    clusterIP: None
    ports:
    - name: inter-router
      port: 55672
      targetPort: 55672
    - name: health
      port: 8080
      protocol: TCP
      targetPort: http
    selector:
      capability: router
      infraUuid: ${INFRA_UUID}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      addressSpace: ${ADDRESS_SPACE}
    labels:
      app: enmasse
      infraType: standard
      infraUuid: ${INFRA_UUID}
    name: ragent-${INFRA_UUID}
  spec:
    ports:
    - name: amqp
      port: 5671
      targetPort: 55671
    selector:
      name: admin
      infraUuid: ${INFRA_UUID}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      addressSpace: ${ADDRESS_SPACE}
    labels:
      app: enmasse
      infraType: standard
      infraUuid: ${INFRA_UUID}
    name: standard-controller-${INFRA_UUID}
  spec:
    ports:
    - name: health
      port: 8080
      protocol: TCP
      targetPort: 8889
    selector:
      name: admin
      infraUuid: ${INFRA_UUID}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      addressSpace: ${ADDRESS_SPACE}
    labels:
      app: enmasse
      infraType: standard
      infraUuid: ${INFRA_UUID}
    name: queue-scheduler-${INFRA_UUID}
  spec:
    ports:
    - name: amqp
      port: 5672
      targetPort: 55671
    selector:
      name: admin
      infraUuid: ${INFRA_UUID}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      addressSpace: ${ADDRESS_SPACE}
      enmasse.io/service-port.https: 8081
    labels:
      app: enmasse
      infraType: standard
      infraUuid: ${INFRA_UUID}
    name: console-${INFRA_UUID}
  spec:
    ports:
    - name: https
      port: 8081
      targetPort: 8080
    selector:
      name: admin
      infraUuid: ${INFRA_UUID}
parameters:
- name: INFRA_UUID
  description: UUID to use for infrastructure
  required: true
- name: INFRA_NAMESPACE
  description: Namespace where infrastructure is created
  required: true
- name: ADDRESS_SPACE_PLAN
  description: Name of address space plan followed
  required: true
- description: The link capacity setting for router
  name: ROUTER_LINK_CAPACITY
  value: '250'
- description: The timeout for establishing reaching open state on client connections
  name: ROUTER_HANDSHAKE_TIMEOUT
  value: '30'
- description: The hostname to use for the exposed route for messaging
  name: CONSOLE_SECRET
  required: true
- description: The secret with cert for the messaging service
  name: MESSAGING_SECRET
  required: true
- description: The name of our address space
  name: ADDRESS_SPACE
  required: true
- description: The namespace of our address space
  name: ADDRESS_SPACE_NAMESPACE
  required: true
- description: The hostname of the authentication service used by this address space
  name: AUTHENTICATION_SERVICE_HOST
  required: true
- description: The port of the authentication service used by this address space
  name: AUTHENTICATION_SERVICE_PORT
  required: true
- description: The CA cert to use for validating authentication service cert
  name: AUTHENTICATION_SERVICE_CA_CERT
  required: true
- description: The client cert to use as identity against authentication service
  name: AUTHENTICATION_SERVICE_CLIENT_SECRET
- description: The hostname to use in sasl init
  name: AUTHENTICATION_SERVICE_SASL_INIT_HOST
- description: The URL to use for OAUTH (if not set, OAUTH is not used)
  name: AUTHENTICATION_SERVICE_OAUTH_URL
- description: Name standard infra config
  name: STANDARD_INFRA_CONFIG_NAME
  required: true
- description: Enable logging of kubernetes events
  name: ENABLE_EVENT_LOGGER
  value: 'true'
- description: Interval (in seconds) to use between controller resync
  name: CONTROLLER_RESYNC_INTERVAL
  value: '600'
- description: Interval (in seconds) to use between status checks
  name: CONTROLLER_CHECK_INTERVAL
  value: '30'
- description: Max number of events queued up for controller
  name: CONTROLLER_EVENT_QUEUE_SIZE
  value: '10000'
- description: The service account with address space admin privileges
  name: ADDRESS_SPACE_ADMIN_SA
  value: address-space-admin
- description: Memory limits for admin
  name: ADMIN_MEMORY_LIMIT
  value: 512Mi
- description: Memory limits for router
  name: ROUTER_MEMORY_LIMIT
  value: 512Mi
- description: Idle timeout for router listeners
  name: ROUTER_IDLE_TIMEOUT
  value: '16'
- description: Router worker threads
  name: ROUTER_WORKER_THREADS
  value: '4'
- description:
  name: CONSOLE_OAUTH_DISCOVERY_URL
- description:
  name: CONSOLE_OAUTH_CLIENT_ID
- description:
  name: CONSOLE_OAUTH_CLIENT_SECRET
- description:
  name: CONSOLE_OAUTH_SCOPE
